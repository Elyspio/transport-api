/* tslint:disable */
/* eslint-disable */
/**
 * Transport API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'postalCode': string;
}
/**
 * 
 * @export
 * @interface Departement
 */
export interface Departement {
    /**
     * 
     * @type {string}
     * @memberof Departement
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Departement
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Departement
     */
    'code': string;
    /**
     * 
     * @type {Array<City>}
     * @memberof Departement
     */
    'cities': Array<City>;
}
/**
 * 
 * @export
 * @interface FuelPriceHistory
 */
export interface FuelPriceHistory {
    /**
     * 
     * @type {string}
     * @memberof FuelPriceHistory
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof FuelPriceHistory
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface FuelStationData
 */
export interface FuelStationData {
    /**
     * 
     * @type {number}
     * @memberof FuelStationData
     */
    'id': number;
    /**
     * 
     * @type {FuelStationLocation}
     * @memberof FuelStationData
     */
    'location': FuelStationLocation;
    /**
     * 
     * @type {Prices}
     * @memberof FuelStationData
     */
    'prices': Prices;
    /**
     * 
     * @type {Array<FuelStationServiceType>}
     * @memberof FuelStationData
     */
    'services': Array<FuelStationServiceType>;
}
/**
 * 
 * @export
 * @interface FuelStationDataDistance
 */
export interface FuelStationDataDistance {
    /**
     * 
     * @type {number}
     * @memberof FuelStationDataDistance
     */
    'id': number;
    /**
     * 
     * @type {FuelStationLocation}
     * @memberof FuelStationDataDistance
     */
    'location': FuelStationLocation;
    /**
     * 
     * @type {Prices}
     * @memberof FuelStationDataDistance
     */
    'prices': Prices;
    /**
     * 
     * @type {Array<FuelStationServiceType>}
     * @memberof FuelStationDataDistance
     */
    'services': Array<FuelStationServiceType>;
    /**
     * 
     * @type {number}
     * @memberof FuelStationDataDistance
     */
    'distance': number;
}
/**
 * 
 * @export
 * @interface FuelStationLocation
 */
export interface FuelStationLocation {
    /**
     * 
     * @type {number}
     * @memberof FuelStationLocation
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof FuelStationLocation
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof FuelStationLocation
     */
    'postalCode': string;
    /**
     * 
     * @type {string}
     * @memberof FuelStationLocation
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof FuelStationLocation
     */
    'city': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum FuelStationServiceType {
    AireDeCampingCars = 'AireDeCampingCars',
    AutomateCb2424 = 'AutomateCb2424',
    Bar = 'Bar',
    Borneslectriques = 'BornesÉlectriques',
    BoutiqueAlimentaire = 'BoutiqueAlimentaire',
    BoutiqueNonAlimentaire = 'BoutiqueNonAlimentaire',
    CarburantAdditiv = 'CarburantAdditivé',
    DabDistributeurAutomatiqueDeBillets = 'DabDistributeurAutomatiqueDeBillets',
    Douches = 'Douches',
    EspaceBb = 'EspaceBébé',
    Gnv = 'Gnv',
    LavageAutomatique = 'LavageAutomatique',
    LavageManuel = 'LavageManuel',
    Laverie = 'Laverie',
    LocationDeVhicule = 'LocationDeVéhicule',
    PistePoidsLourds = 'PistePoidsLourds',
    RelaisColis = 'RelaisColis',
    RestaurationSurPlace = 'RestaurationSurPlace',
    RestaurationEmporter = 'RestaurationÀEmporter',
    ServicesRparationEntretien = 'ServicesRéparationEntretien',
    StationDeGonflage = 'StationDeGonflage',
    ToilettesPubliques = 'ToilettesPubliques',
    VenteDAdditifsCarburants = 'VenteDAdditifsCarburants',
    VenteDeFioulDomestique = 'VenteDeFioulDomestique',
    VenteDeGazDomestiqueButanePropane = 'VenteDeGazDomestiqueButanePropane',
    VenteDePtroleLampant = 'VenteDePétroleLampant',
    Wifi = 'Wifi'
}


/**
 * 
 * @export
 * @interface Prices
 */
export interface Prices {
    /**
     * 
     * @type {Array<FuelPriceHistory>}
     * @memberof Prices
     */
    'e10': Array<FuelPriceHistory>;
    /**
     * 
     * @type {Array<FuelPriceHistory>}
     * @memberof Prices
     */
    'e85': Array<FuelPriceHistory>;
    /**
     * 
     * @type {Array<FuelPriceHistory>}
     * @memberof Prices
     */
    'gazole': Array<FuelPriceHistory>;
    /**
     * 
     * @type {Array<FuelPriceHistory>}
     * @memberof Prices
     */
    'gpLc': Array<FuelPriceHistory>;
    /**
     * 
     * @type {Array<FuelPriceHistory>}
     * @memberof Prices
     */
    'sp95': Array<FuelPriceHistory>;
    /**
     * 
     * @type {Array<FuelPriceHistory>}
     * @memberof Prices
     */
    'sp98': Array<FuelPriceHistory>;
}
/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {RegionId}
     * @memberof Region
     */
    'id': RegionId;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'label': string;
    /**
     * 
     * @type {Array<Departement>}
     * @memberof Region
     */
    'departements': Array<Departement>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum RegionId {
    AuvergneRhoneAlpes = 'AuvergneRhoneAlpes',
    BourgogneFrancheComte = 'BourgogneFrancheComte',
    Bretagne = 'Bretagne',
    CentreValDeLoire = 'CentreValDeLoire',
    Corse = 'Corse',
    GrandEst = 'GrandEst',
    HautDeFrance = 'HautDeFrance',
    Normandie = 'Normandie',
    NouvelleAquitaine = 'NouvelleAquitaine',
    IleDeFrance = 'IleDeFrance',
    Occitanie = 'Occitanie',
    PaysDeLaLoire = 'PaysDeLaLoire',
    ProvenceAlpesCoteAzur = 'ProvenceAlpesCoteAzur',
    Martinique = 'Martinique',
    Guadeloupe = 'Guadeloupe',
    Guyane = 'Guyane',
    LaReunion = 'LaReunion',
    Mayotte = 'Mayotte',
    Autre = 'Autre'
}


/**
 * 
 * @export
 * @interface Statistic
 */
export interface Statistic {
    /**
     * 
     * @type {string}
     * @memberof Statistic
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof Statistic
     */
    'id': string;
    /**
     * 
     * @type {StatisticInfo}
     * @memberof Statistic
     */
    'data': StatisticInfo;
}
/**
 * 
 * @export
 * @interface StatisticData
 */
export interface StatisticData {
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof StatisticData
     */
    'average': { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof StatisticData
     */
    'max': { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof StatisticData
     */
    'min': { [key: string]: number; };
    /**
     * 
     * @type {Array<{ [key: string]: number; }>}
     * @memberof StatisticData
     */
    'deciles': Array<{ [key: string]: number; }>;
}
/**
 * 
 * @export
 * @interface StatisticInfo
 */
export interface StatisticInfo {
    /**
     * 
     * @type {{ [key: string]: StatisticData; }}
     * @memberof StatisticInfo
     */
    'cities': { [key: string]: StatisticData; };
    /**
     * 
     * @type {{ [key: string]: StatisticData; }}
     * @memberof StatisticInfo
     */
    'departements': { [key: string]: StatisticData; };
    /**
     * 
     * @type {{ [key: string]: StatisticData; }}
     * @memberof StatisticInfo
     */
    'regions': { [key: string]: StatisticData; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum StatsTimeType {
    AllTime = 'AllTime',
    Year10 = 'Year10',
    Year5 = 'Year5',
    Year2 = 'Year2',
    Year = 'Year',
    Month = 'Month',
    Month3 = 'Month3',
    Month6 = 'Month6',
    Week = 'Week'
}



/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export const DatabaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateYearly: async (year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('updateYearly', 'year', year)
            const localVarPath = `/api/database/prices/{year}/refresh`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseApi - functional programming interface
 * @export
 */
export const DatabaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateYearly(year: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateYearly(year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabaseApi - factory interface
 * @export
 */
export const DatabaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseApiFp(configuration)
    return {
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateYearly(year: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateYearly(year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
export class DatabaseApi extends BaseAPI {
    /**
     * 
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public updateYearly(year: number, options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).updateYearly(year, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FuelStationsApi - axios parameter creator
 * @export
 */
export const FuelStationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [minDate] 
         * @param {string} [maxDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuelStationsBetweenDates: async (minDate?: string, maxDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/fuel-stations/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minDate !== undefined) {
                localVarQueryParameter['minDate'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString() :
                    minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['maxDate'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString() :
                    maxDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {number} [radius] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuelStationsNear: async (latitude: number, longitude: number, radius?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('getFuelStationsNear', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('getFuelStationsNear', 'longitude', longitude)
            const localVarPath = `/api/fuel-stations/near`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuelStationsApi - functional programming interface
 * @export
 */
export const FuelStationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FuelStationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [minDate] 
         * @param {string} [maxDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFuelStationsBetweenDates(minDate?: string, maxDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FuelStationData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFuelStationsBetweenDates(minDate, maxDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {number} [radius] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFuelStationsNear(latitude: number, longitude: number, radius?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FuelStationDataDistance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFuelStationsNear(latitude, longitude, radius, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FuelStationsApi - factory interface
 * @export
 */
export const FuelStationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FuelStationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [minDate] 
         * @param {string} [maxDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuelStationsBetweenDates(minDate?: string, maxDate?: string, options?: any): AxiosPromise<Array<FuelStationData>> {
            return localVarFp.getFuelStationsBetweenDates(minDate, maxDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {number} [radius] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuelStationsNear(latitude: number, longitude: number, radius?: number, options?: any): AxiosPromise<Array<FuelStationDataDistance>> {
            return localVarFp.getFuelStationsNear(latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuelStationsApi - object-oriented interface
 * @export
 * @class FuelStationsApi
 * @extends {BaseAPI}
 */
export class FuelStationsApi extends BaseAPI {
    /**
     * 
     * @param {string} [minDate] 
     * @param {string} [maxDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelStationsApi
     */
    public getFuelStationsBetweenDates(minDate?: string, maxDate?: string, options?: AxiosRequestConfig) {
        return FuelStationsApiFp(this.configuration).getFuelStationsBetweenDates(minDate, maxDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} latitude 
     * @param {number} longitude 
     * @param {number} [radius] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelStationsApi
     */
    public getFuelStationsNear(latitude: number, longitude: number, radius?: number, options?: AxiosRequestConfig) {
        return FuelStationsApiFp(this.configuration).getFuelStationsNear(latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/locations/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Region>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<Region>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(options?: any): AxiosPromise<void> {
            return localVarFp.refresh(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public getAll(options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public refresh(options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).refresh(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {StatsTimeType} statsTimeType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeeklyStats: async (statsTimeType: StatsTimeType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statsTimeType' is not null or undefined
            assertParamExists('getWeeklyStats', 'statsTimeType', statsTimeType)
            const localVarPath = `/api/statistics/{statsTimeType}`
                .replace(`{${"statsTimeType"}}`, encodeURIComponent(String(statsTimeType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistics/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshDailyStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistics/refresh/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWeeklyStats: async (year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('refreshWeeklyStats', 'year', year)
            const localVarPath = `/api/statistics/refresh/weekly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {StatsTimeType} statsTimeType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeeklyStats(statsTimeType: StatsTimeType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Statistic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeeklyStats(statsTimeType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshDailyStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshDailyStats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshWeeklyStats(year: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshWeeklyStats(year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * 
         * @param {StatsTimeType} statsTimeType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeeklyStats(statsTimeType: StatsTimeType, options?: any): AxiosPromise<Array<Statistic>> {
            return localVarFp.getWeeklyStats(statsTimeType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(options?: any): AxiosPromise<void> {
            return localVarFp.refresh(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshDailyStats(options?: any): AxiosPromise<void> {
            return localVarFp.refreshDailyStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWeeklyStats(year: number, options?: any): AxiosPromise<void> {
            return localVarFp.refreshWeeklyStats(year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
    /**
     * 
     * @param {StatsTimeType} statsTimeType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getWeeklyStats(statsTimeType: StatsTimeType, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getWeeklyStats(statsTimeType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public refresh(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).refresh(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public refreshDailyStats(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).refreshDailyStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public refreshWeeklyStats(year: number, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).refreshWeeklyStats(year, options).then((request) => request(this.axios, this.basePath));
    }
}


